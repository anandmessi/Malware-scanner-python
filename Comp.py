import os
import hashlib
import requests
import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
import mysql.connector
from tabulate import tabulate
import webbrowser
from PIL import Image, ImageTk


API_KEY = '29026cf065d9e500dc52916560d526fc5532441155b297d5d50acea00ae8d29c'

class MalwareScanner:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title('Malware Scanner')
        self.root.geometry('800x600')

        self.setup_database()
        self.set_background_image()  # Set a single background image
        self.create_widgets()

        self.root.mainloop()

    def set_background_image(self):
        background_image = Image.open('background.jpg')  #just background img
        background_photo = ImageTk.PhotoImage(background_image)
        background_label = tk.Label(self.root, image=background_photo)
        background_label.place(x=0, y=0, relwidth=1, relheight=1)
        background_label.image = background_photo



    def setup_database(self):
        self.db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="2006"
        )
        self.cursor = self.db.cursor()

        self.cursor.execute("CREATE DATABASE IF NOT EXISTS malware_history")
        self.db.database = "malware_history"
        self.cursor.execute("USE malware_history")

        self.cursor.execute("CREATE TABLE IF NOT EXISTS scans (id INT AUTO_INCREMENT PRIMARY KEY, filename VARCHAR(255), positives INT)")

        self.db.commit()

    def create_widgets(self):
        self.scan_button = tk.Button(self.root, text='Scan', font=('Helvetica', 14), bg='#0095f6', fg='white', command=self.scan_button_click)
        self.scan_button.pack(pady=20)

        self.result_text = tk.Label(self.root, text='', font=('Helvetica', 14), bg='#fafafa', fg='#333')
        self.result_text.pack(pady=10)

        self.show_history_button = tk.Button(self.root, text='Show Scan History', font=('Helvetica', 14), bg='#555', fg='white', command=self.show_history)
        self.show_history_button.pack(pady=10)

    def scan_file(self, file_path):
        # Simulate a basic scan using a predefined list of malware names
        malware_names = ['Trojan', 'Virus', 'Ransomware']
        detected_malware = [name for name in malware_names if name.lower() in file_path.lower()]
        positives = len(detected_malware)
        return positives

    def scan_button_click(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            file_name = os.path.basename(file_path)
            file_hash = self.get_file_hash(file_path)
            positives = self.scan_file(file_path)
            if positives > 0:
                self.save_scan_result(file_name, positives)
                report_url = f'https://www.virustotal.com/gui/file/{file_hash}/detection'
                webbrowser.open_new_tab(report_url)
            else:
                messagebox.showinfo('Scan Result', 'No Virus Detected :)')

    def save_scan_result(self, file_name, positives):
        self.cursor.execute("INSERT INTO scans (filename, positives) VALUES (%s, %s)", (file_name, positives))
        self.db.commit()
        self.result_text.config(text=f'Scan result for {file_name}: {positives} malware detected')

    def show_history(self):
        history_window = tk.Toplevel(self.root)
        history_window.title('Scan History')
        history_window.geometry('800x500')

        history_label = tk.Label(history_window, text='Scan History', font=('Helvetica', 16))
        history_label.pack(pady=10)

        self.clear_history_button = tk.Button(history_window, text='Clear Scan History', font=('Helvetica', 14), bg='#f44336', fg='white', command=self.clear_history)
        self.clear_history_button.pack(pady=10)

        headers = ['File Name', 'Malware Detected']
        rows = self.get_scan_history()

        history_text = tk.Text(history_window, font=('Helvetica', 12))
        history_text.insert(tk.END, tabulate(rows, headers, tablefmt="pretty"))
        history_text.pack()

    def clear_history(self):
        self.cursor.execute("DELETE FROM scans")
        self.db.commit()
        messagebox.showinfo('Scan History Cleared', 'Scan history has been cleared.')

    def get_scan_history(self):
        self.cursor.execute("SELECT filename, positives FROM scans")
        scan_history = self.cursor.fetchall()
        return [(scan[0], "Yes" if scan[1] > 0 else "No") for scan in scan_history]

    def get_file_hash(self, file_path):
        with open(file_path, 'rb') as f:
            file_data = f.read()
        return hashlib.sha256(file_data).hexdigest()

#calls funct
malware_scanner = MalwareScanner()
